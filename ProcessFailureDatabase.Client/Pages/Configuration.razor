@page "/configuration"
@using ProcessFailureDatabase.Client.Services
@using ProcessFailureDatabase.Shared.Models.Component
@using ProcessFailureDatabase.Shared.Models.ValueStream
@using ProcessFailureDatabase.Client.Components;
@inject NavigationManager NavigationManager
@inject IValueStreamService ValueStreamService
<h3>Configuration</h3>
<div class="row">
    <div class="col-md-4">
        <h5>
            Value Streams
            <PFDBButton Icon="bi bi-plus-circle" OnClick="AddConfigComponentVisible" />
        </h5>
        @foreach (var vs in _example)
        {
            <!-- make into a check box? Possibly with styling so its not a check -->
            <div class="rounded border p-2 m-2" onclick="@(() => Open(vs.Id))">
                @vs.Name
            </div>
        }
        @if (_addIsVisible)
        {
            <div class="rounded border p-2 m-2">
                <EditForm Model="_newValueStream" OnValidSubmit="HandleSubmit">
                    <span class="col-md-3">
                        <PFDBInputText Label="Value Stream Name:" Type="text" />
                        <PFDBButton Type="submit" Text="Save" OnClick="@(() => Add
                (_newValueStream))" />
                    </span>
                </EditForm>
            </div>
        }
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <h5>Machine Types</h5>
        @foreach (var vs in _example)
        {
            <!-- make into a check box? Possibly with styling so its not a check -->
            <div class="rounded border p-2 m-2">
                @vs.Name
            </div>
        }
    </div>
    <div class="col-md-4">
        <h5>Stations</h5>
        @foreach (var vs in _example)
        {
            <!-- make into a check box? Possibly with styling so its not a check -->
            <div class="rounded border p-2 m-2">
                @vs.Name
            </div>
        }
    </div>
</div>

@code {
    private bool _addIsVisible = false;

    private ValueStreamCreateDto _newValueStream = new();

    
    private readonly List<DropDownListObject> _example =
    [
        new DropDownListObject(1, "bill"),
        new DropDownListObject(2, "ted"),
        new DropDownListObject(3, "sonny"),
        new DropDownListObject(4, "cher")
    ];
    
    protected override async Task OnInitializedAsync()
    {
        await UpdatePage();
    }

    private void AddConfigComponentVisible()
    {
        _addIsVisible = true;
    }

    private void Open(int id)
    {
        NavigationManager.NavigateTo($"/vs/{id}");
    }

    private async Task Add(ValueStreamCreateDto vs)
    {
        await ValueStreamService.CreateAsync(vs);
        await UpdatePage();
    }

    private async Task HandleSubmit(EditContext arg)
    {
        await Add(_newValueStream);
        ReloadPage();
    }

    private async Task UpdatePage()
    {
        await ValueStreamService.GetAllAsync();
        ValueStreamService.OnChange += StateHasChanged;
        await InvokeAsync(StateHasChanged);
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo("/configuration", true);
    }
}